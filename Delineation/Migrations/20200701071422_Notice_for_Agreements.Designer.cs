// <auto-generated />
using System;
using Delineation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Delineation.Migrations
{
    [DbContext(typeof(DelineationContext))]
    [Migration("20200701071422_Notice_for_Agreements")]
    partial class Notice_for_Agreements
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomIdentity.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Linom")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Delineation.Models.D_Act", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsBalance")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ConsExpl")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DevBalance")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("DevExpl")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("EntityDoc")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FIOtrans")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsEntity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransit")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("StrPSline10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TcId")
                        .HasColumnType("int");

                    b.Property<string>("Validity")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TcId");

                    b.ToTable("D_Acts");
                });

            modelBuilder.Entity("Delineation.Models.D_Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Notice")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.HasIndex("PersonId");

                    b.ToTable("D_Agreements");
                });

            modelBuilder.Entity("Delineation.Models.D_Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kod_long")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Linom")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("D_Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Kod_long = "542000",
                            Linom = "505",
                            Name = "Владимир",
                            Patronymic = "Францевич",
                            PositionId = 1,
                            Surname = "Забавнюк"
                        },
                        new
                        {
                            Id = 2,
                            Kod_long = "542000",
                            Linom = "1785",
                            Name = "Федор",
                            Patronymic = "Иванович",
                            PositionId = 2,
                            Surname = "Калилец"
                        },
                        new
                        {
                            Id = 3,
                            Kod_long = "542000",
                            Linom = "1672",
                            Name = "Анатолий",
                            Patronymic = "Леонидович",
                            PositionId = 3,
                            Surname = "Климович"
                        },
                        new
                        {
                            Id = 4,
                            Kod_long = "542000",
                            Linom = "2149",
                            Name = "Сиана",
                            Patronymic = "Владимировна",
                            PositionId = 4,
                            Surname = "Крейдич"
                        });
                });

            modelBuilder.Entity("Delineation.Models.D_Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("D_Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Начальник РЭС"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Зам. начальника РЭС"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Главный инженер РЭС"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Бухгалтер РЭС"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Главный инженер ВРЭС"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Начальник ВРЭС"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Старший мастер ССЭЭ"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Бухгалтер по учёту ОС"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Начальник ОДС"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Начальник СРС"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Начальник ССЭЭ"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Главный бухгалтер"
                        });
                });

            modelBuilder.Entity("Delineation.Models.D_Res", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("BuhId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Dover")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("FIOnachRod")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("GlInzhId")
                        .HasColumnType("int");

                    b.Property<int?>("NachId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RESa")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("RESom")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("ZamNachId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuhId");

                    b.HasIndex("GlInzhId");

                    b.HasIndex("NachId");

                    b.HasIndex("ZamNachId");

                    b.ToTable("D_Reses");

                    b.HasData(
                        new
                        {
                            Id = 541000,
                            BuhId = 1,
                            City = "Пинск",
                            Dover = "от 01.09.2019 №2432",
                            FIOnachRod = "Булавина Виталия Федоровича",
                            GlInzhId = 1,
                            NachId = 1,
                            Name = "Пинский Городской",
                            RESa = "Пинского Городского",
                            RESom = "Пинским Городским",
                            ZamNachId = 1
                        },
                        new
                        {
                            Id = 542000,
                            BuhId = 4,
                            City = "Пинск",
                            Dover = "от 01.09.2019 №2432",
                            FIOnachRod = "Забавнюка Владимира Францевича",
                            GlInzhId = 3,
                            NachId = 1,
                            Name = "Пинский Сельский",
                            RESa = "Пинского Сельского",
                            RESom = "Пинским Сельским",
                            ZamNachId = 2
                        },
                        new
                        {
                            Id = 543000,
                            BuhId = 1,
                            GlInzhId = 1,
                            NachId = 1,
                            Name = "Лунинецкий",
                            ZamNachId = 1
                        },
                        new
                        {
                            Id = 544000,
                            BuhId = 1,
                            GlInzhId = 1,
                            NachId = 1,
                            Name = "Столинский",
                            ZamNachId = 1
                        },
                        new
                        {
                            Id = 545000,
                            BuhId = 1,
                            GlInzhId = 1,
                            NachId = 1,
                            Name = "Ивановский",
                            ZamNachId = 1
                        },
                        new
                        {
                            Id = 546000,
                            BuhId = 1,
                            GlInzhId = 1,
                            NachId = 1,
                            Name = "Дрогичинский",
                            ZamNachId = 1
                        });
                });

            modelBuilder.Entity("Delineation.Models.D_Tc", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AbonNum")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Category2")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FIO")
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Line04")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Line04InvNum")
                        .HasColumnType("int");

                    b.Property<string>("Line10")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Line10InvNum")
                        .HasColumnType("int");

                    b.Property<string>("Num")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ObjName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PS")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PSInvNum")
                        .HasColumnType("int");

                    b.Property<string>("Pillar")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Pow")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<int?>("ResId")
                        .HasColumnType("int");

                    b.Property<string>("TP")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TPInvNum")
                        .HasColumnType("int");

                    b.Property<int>("TPnum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResId");

                    b.ToTable("D_Tces");
                });

            modelBuilder.Entity("Delineation.Models.Unit", b =>
                {
                    b.Property<int>("Kod")
                        .HasColumnType("int");

                    b.Property<int>("Kod_dop")
                        .HasColumnType("int");

                    b.Property<string>("Naim")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("sprpodr");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Delineation.Models.D_Act", b =>
                {
                    b.HasOne("Delineation.Models.D_Tc", "Tc")
                        .WithMany()
                        .HasForeignKey("TcId");
                });

            modelBuilder.Entity("Delineation.Models.D_Agreement", b =>
                {
                    b.HasOne("Delineation.Models.D_Act", "Act")
                        .WithMany("Agreements")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineation.Models.D_Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Delineation.Models.D_Person", b =>
                {
                    b.HasOne("Delineation.Models.D_Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Delineation.Models.D_Res", b =>
                {
                    b.HasOne("Delineation.Models.D_Person", "Buh")
                        .WithMany()
                        .HasForeignKey("BuhId");

                    b.HasOne("Delineation.Models.D_Person", "GlInzh")
                        .WithMany()
                        .HasForeignKey("GlInzhId");

                    b.HasOne("Delineation.Models.D_Person", "Nach")
                        .WithMany()
                        .HasForeignKey("NachId");

                    b.HasOne("Delineation.Models.D_Person", "ZamNach")
                        .WithMany()
                        .HasForeignKey("ZamNachId");
                });

            modelBuilder.Entity("Delineation.Models.D_Tc", b =>
                {
                    b.HasOne("Delineation.Models.D_Res", "Res")
                        .WithMany()
                        .HasForeignKey("ResId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CustomIdentity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CustomIdentity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomIdentity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CustomIdentity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
