@model Delineation.Models.D_Act;
@{
    ViewData["Title"] = "редактирование схемы";
}
<style type="text/css">
    .static {
        cursor: not-allowed;
    }

    .draggable {
        cursor: move;
    }

    .draggable-group {
        cursor: move;
    }

    .text-center {
        text-align: center;
        background: lightgray;
    }
</style>
<script src="~/lib/d3/d3.min.js"></script>
<h2>редактирование схемы разграничения</h2>
<h3>ФИО заявителя: <i>@Model.Tc.FIO</i> адрес:<i>@Model.Tc.Address</i></h3>
<a>id:@Model.Id path:@ViewBag.xx</a>
<script type="text/javascript">
    function Del() {
        document.getElementById("del").value = "1";
        document.getElementById("MyForm").submit();
    }
</script>
<script type="text/javascript">
    function PutInPng() {
        var img_to_cut = document.getElementById("backImg");
        let FileName = "";
        if (img_to_cut != null) img_to_cut.remove();
        //-------------------   svg   --------------------
        var html_svg = document.querySelector("svg").parentNode.innerHTML;
        var img_src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(html_svg)));
        document.getElementById("svg").value = encodeURIComponent(img_src)
        //------------------------------------------------
        var myCanvas = document.querySelector("canvas");
        myCanvas.setAttribute('width', 1500);
        myCanvas.setAttribute('height', 1000);
        var context = myCanvas.getContext("2d");
        //------------------------------------------------
        var image = new Image;
        image.src = img_src;
        var image2 = new Image();
        image2.src = "/Output/images/" + document.getElementById("hidden_FileName").value;
        image.addEventListener("load", function () {
            context.drawImage(image2, 0, 0, 1500, 1000); // 3,4 - корректировка положения подложки
            alert("image2");
        })
        image.addEventListener("load", function () {
            context.drawImage(image, 0, 0, 1500, 1000);
            var myCanvas = document.querySelector("canvas");
            document.getElementById("png").value = encodeURIComponent(myCanvas.toDataURL()); //The default format type is image/png  ->  or 'image/jpeg'
            myCanvas.parentNode.removeChild(myCanvas);
            document.getElementById("MyFormPNG").submit();
        })
        //encodeURIComponent этот метод заменяет все символы, кроме:символов латинского алфавита, десятичных цифр и - _. ! ~ * ' ( ).
        // !!!  иначе в строке myCanvas.toDataURL() при post передаче исчезнут все символы '+'
    }
    var rad = "draw", fig = "line", figure, figSelect;
    function makeDraggable(evt) {
        {
            var svg = evt.target;
            //alert("hi");
            svg.addEventListener('mousedown', startDrag);
            svg.addEventListener('mousemove', drag);
            svg.addEventListener('mouseup', endDrag);
            svg.addEventListener('mouseleave', endDrag);
            svg.addEventListener('touchstart', startDrag);
            svg.addEventListener('touchmove', drag);
            svg.addEventListener('touchend', endDrag);
            svg.addEventListener('touchleave', endDrag);
            svg.addEventListener('touchcancel', endDrag);

            var selectedElement, offset, transform,
                bbox, minX, maxX, minY, maxY, confined;

            var boundaryX1 = 0;
            var boundaryX2 = 900;
            var boundaryY1 = 0;
            var boundaryY2 = 600;
        }
        function getMousePosition(evt) {
            var CTM = svg.getScreenCTM();
            if (evt.touches) { evt = evt.touches[0]; }
            return {
                x: (evt.clientX - CTM.e) / CTM.a,
                y: (evt.clientY - CTM.f) / CTM.d
            };
        }
        function startDrag(evt) {
            offset = getMousePosition(evt);
            if (rad == "drag") {
                if (evt.target.classList.contains('draggable') || evt.target.parentNode.classList.contains("draggable-group")) {
                    selectedElement = evt.target;
                    if (evt.target.parentNode.classList.contains("draggable-group")) selectedElement = evt.target.parentNode;

                    // Make sure the first transform on the element is a translate transform
                    var transforms = selectedElement.transform.baseVal;

                    if (transforms.length === 0 || transforms.getItem(0).type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) {
                        // Create an transform that translates by (0, 0)
                        var translate = svg.createSVGTransform();
                        translate.setTranslate(0, 0);
                        selectedElement.transform.baseVal.insertItemBefore(translate, 0);
                    }

                    // Get initial translation
                    transform = transforms.getItem(0);
                    offset.x -= transform.matrix.e;
                    offset.y -= transform.matrix.f;
                    bbox = selectedElement.getBBox();
                    minX = boundaryX1 - bbox.x;
                    maxX = boundaryX2 - bbox.x - bbox.width;
                    minY = boundaryY1 - bbox.y;
                    maxY = boundaryY2 - bbox.y - bbox.height;

                    //confined = evt.target.classList.contains('confine');
                    //if (confined) {

                    //}
                }
            } else if (rad == "select") {
                if (evt.target.classList.contains('draggable')) {
                    selectedElement = evt.target;
                    figSelect = selectedElement;
                    //alert(selectedElement.tagName);//.getAttribute("width"));
                    selectedElement.style.stroke = "blue";
                }
            } else if (rad == "draw") {
                switch (fig) {
                    case "line":
                        figure = d3.select("svg.MySvg")
                            .insert("line", "text.top");
                        figure.attr("class", "draggable")
                            .attr("x1", offset.x)
                            .attr("y1", offset.y)
                            .attr("x2", offset.x)
                            .attr("y2", offset.y)
                            .attr("stroke-width", "2")
                            .attr("stroke", "red");
                        break;
                    case "rect":
                        figure = d3.select("svg.MySvg")
                            .insert("rect", "text.top");
                        figure.attr("class", "draggable")
                            .attr("x", offset.x)
                            .attr("y", offset.y)
                            .attr("width", 0)
                            .attr("height", 0)
                            .attr("stroke-width", "2")
                            .attr("stroke", "red")
                            .attr("fill", "none");
                        break;
                    case "circle":
                        figure = d3.select("svg.MySvg")
                            .insert("circle", "text.top");
                        figure.attr("class", "draggable")
                            .attr("cx", offset.x)
                            .attr("cy", offset.y)
                            .attr("r", 0);
                        break;
                }
            }
        }

        function drag(evt) {
            var coord = getMousePosition(evt);
            let dx, dy;
            if (rad == "drag") {
                if (selectedElement) {
                    evt.preventDefault();

                    dx = coord.x - offset.x;
                    dy = coord.y - offset.y;

                    if (dx < minX) { dx = minX; }
                    else if (dx > maxX) { dx = maxX; }
                    if (dy < minY) { dy = minY; }
                    else if (dy > maxY) { dy = maxY; }
                    //if (confined) {}
                    transform.setTranslate(dx, dy);
                }
            } else if (rad == "draw") {
                if (figure != null) {
                    switch (fig) {
                        case "line":
                            dx = Math.abs(coord.x - figure.attr("x1"));
                            dy = Math.abs(coord.y - figure.attr("y1"))
                            if (dx > 20 * dy)
                                figure.attr("x2", coord.x).attr("y2", figure.attr("y1"));
                            else if (dy > 20 * dx)
                                figure.attr("x2", figure.attr("x1")).attr("y2", coord.y);
                            else
                                figure.attr("x2", coord.x).attr("y2", coord.y);
                            break;
                        case "rect":
                            dx = Math.abs(coord.x - figure.attr("x"));
                            dy = Math.abs(coord.y - figure.attr("y"))
                            figure.attr("width", dx).attr("height", dy);
                            break;
                        case "circle":
                            dx = Math.abs(coord.x - figure.attr("cx"));
                            dy = Math.abs(coord.y - figure.attr("cy"))
                            figure.attr("r", Math.sqrt(dx * dx + dy * dy));
                            break;
                    }
                }
            }
        }

        function endDrag(evt) {
            selectedElement = false;
            figure = null;
        }
    }
    function AddRect() {
        d3.select("svg.MySvg")
            .insert("rect", "text.top")
            .attr("x", 100)
            .attr("y", 100)
            .attr("width", 100)
            .attr("height", 100)
            .attr("class", "draggable")
            .style("fill", "blue");
    }
    function DellRect() {
        d3.selectAll("rect").remove();
    }
    function AddText() {
        var itext = document.getElementById("itext").value;
        if (itext != "") {
            d3.select("svg.MySvg")
                .append("text")
                .attr("class", "draggable")
                .attr("x", 200).attr("y", 50)
                .attr("text-anchor", "start")
                .text(itext);
            document.getElementById("itext").value = "";
        }
    }
    function Ffont() {
        let allText = document.querySelectorAll("text");
        allText.forEach(element => {
            element.style.cssText = "font-size:" + document.getElementById("ifont").value + "px;";
        })
        //document.svg.style.cssText = "font-size:50px;";
    }
    function ChangeRad(val) {
        rad = val;
    }
    function ChangeFig(val) {
        fig = val;
    }
    function Cancel() { figSelect.removeAttribute("style"); figSelect.remove(); figSelect = null; }
</script>
@using (Html.BeginForm("Drawing", "D_Act", FormMethod.Post, new { enctype = "multipart/form-data", id = "MyForm" }))
{
    <input type="hidden" name="id" value="@Model.Id" />
    <input type="hidden" id="del" name="del" value="0" />
    <input type="file" name="postedFiles" accept="image/png, image/jpg, image/jpeg" />
    <input type="submit" value="Загрузить" />
    <button onclick="Del(); return false;">удалить</button>
    <br />
    <span style="color:green">@Html.Raw(ViewBag.Message)</span>
    <br />
    if (ViewBag.FileName != null)
    {
        //<img src="~/Output/images/@ViewBag.FileName" title="загруженная схема" width="900" height="600" />
    }
}
    <table style="text-align: left ">
        <tr>
            <td>
                <button onclick="AddRect(); return false;">addRect</button>
                <button onclick="DellRect(); return false;">delRect</button><br />
            </td>
            <td>
                <input type="text" id="itext" />
                <button onclick="AddText(); return false;">addText</button><br />
                <input type="text" id="ifont" value="25" />
                <button onclick="Ffont(); return false;">font</button>
            </td>
            <td>
                <fieldset>
                    <legend>тип действия</legend>
                    <input type="radio" id="rad1" name="action" value="drag" onchange="ChangeRad(this.value)" />
                    <label for="rad1">перетаскивание</label><br />
                    <input type="radio" id="rad2" name="action" value="select" onchange="ChangeRad(this.value)" />
                    <label for="rad2">выделение</label><button onclick="Cancel(); return false;">Отмена</button><br />
                    <input type="radio" checked="checked" id="rad3" name="action" value="draw" onchange="ChangeRad(this.value)" />
                    <label for="rad3">рисование</label><br />
                    <input type="radio" id="rad4" name="action" value="-" onchange="ChangeRad(this.value)" />
                    <label for="rad4">-</label>
                </fieldset>
            </td>
            <td>
                <fieldset>
                    <legend>тип объекта</legend>
                    <input type="radio" id="fig1" checked="checked" name="figure" value="line" onchange="ChangeFig(this.value)" />
                    <label for="fig1">линия</label><br />
                    <input type="radio" id="fig2" name="figure" value="rect" onchange="ChangeFig(this.value)" />
                    <label for="fig2">прямоугольник</label><br />
                    <input type="radio" id="fig3" name="figure" value="circle" onchange="ChangeFig(this.value)" />
                    <label for="fig3">круг</label><br />
                    <input type="radio" id="fig4" name="figure" value="-" onchange="ChangeFig(this.value)" />
                    <label for="fig4">-</label>
                </fieldset>
            </td>
            <td>
                <label id="labelRad"></label>
            </td>
        </tr>
    </table>

    <form id="MyFormPNG" asp-action="SavePNG" method="post">
        <input type="hidden" id="png" name="png" />
        <input type="hidden" id="svg" name="svg" />
        <input type="hidden" id="id" name="id" value="@Model.Id" />
        <input type="hidden" id="hidden_FileName" value="@ViewBag.FileName" />
        <input type="submit" onclick="PutInPng(); return false;" value="Сохранить" />
    </form>
    <div>
        <canvas width="1" height="1"></canvas>
    </div>
    <div>
        <svg class="MySvg" xmlns="http://www.w3.org/2000/svg" width="900" height="600" viewBox="0 0 900 600" onload="makeDraggable(evt)">
            @*<rect x="0" y="0" width="900" height="600" fill="white"></rect>*@
            @if (ViewBag.FileName != null)
            {
                <image id="backImg" xlink:href="/Output/images/@ViewBag.FileName" width="900" height="600"></image>
            }
            <rect class="draggable" x="183.2214765100671" y="51.191275167785236" width="41.275167785234885" height="42.28187919463086"></rect>
            <text class="draggable top" x="30" y="30" text-anchor="start" style="font-size:25px" alignment-baseline="middle">ПС Пинск-220</text>
        </svg>
    </div>
